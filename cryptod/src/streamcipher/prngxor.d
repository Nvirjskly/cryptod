// Written in the D programming language

/*	Copyright Andrey A Popov 2012
 * 
 *	Permission is hereby granted, free of charge, to any person or organization
 *	obtaining a copy of the software and accompanying documentation covered by
 *	this license (the "Software") to use, reproduce, display, distribute,
 *	execute, and transmit the Software, and to prepare derivative works of the
 *	Software, and to permit third-parties to whom the Software is furnished to
 *	do so, all subject to the following:
 *	
 *	The copyright notices in the Software and this entire statement, including
 *	the above license grant, this restriction and the following disclaimer,
 *	must be included in all copies of the Software, in whole or in part, and
 *	all derivative works of the Software, unless such copies or derivative
 *	works are solely in the form of machine-executable object code generated by
 *	a source language processor.
 *	
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *	DEALINGS IN THE SOFTWARE.
 */

/**
 * Authors: Andrey A. Popov, andrey.anat.popov@gmail.com
 */

module cryptod.streamcipher.prngxor;

import cryptod.prng.prng;

class PRNGxor
{
	PRNG e;
	PRNG d;
	
	this(PRNG p,PRNG p2)
	{
		e = p;
		d = p2;
	}
	
	uint Cipher(uint a)
	{
		return e.getNextInt() ^ a;
	}
	uint InvCipher(uint b)
	{
		return d.getNextInt() ^ b;
	}
}

unittest
{
	import cryptod.prng.blumblumshub;
	import std.stdio;
	
	BlumBlumShub bbs = new BlumBlumShub();
	BlumBlumShub bbs2 = new BlumBlumShub();
	
	PRNGxor pr = new PRNGxor(bbs,bbs2);
	
	uint[] a;
	for(uint i = 0; i < 20; i++)
		a ~= i;
	
	uint[] e;
	
	for(uint i = 0; i < 20; i++)
		e ~= pr.Cipher(a[i]);	
		
	
	uint[] d;	
	
	for(uint i = 0; i < 20; i++)
		d ~= pr.InvCipher(e[i]);	
		
	assert(a == d);
	writeln("PRNGxor unittest passed.");
}
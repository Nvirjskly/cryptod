// Written in the D programming language

/*	Copyright Andrey A Popov 2012
 * 
 *	Permission is hereby granted, free of charge, to any person or organization
 *	obtaining a copy of the software and accompanying documentation covered by
 *	this license (the "Software") to use, reproduce, display, distribute,
 *	execute, and transmit the Software, and to prepare derivative works of the
 *	Software, and to permit third-parties to whom the Software is furnished to
 *	do so, all subject to the following:
 *	
 *	The copyright notices in the Software and this entire statement, including
 *	the above license grant, this restriction and the following disclaimer,
 *	must be included in all copies of the Software, in whole or in part, and
 *	all derivative works of the Software, unless such copies or derivative
 *	works are solely in the form of machine-executable object code generated by
 *	a source language processor.
 *	
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *	DEALINGS IN THE SOFTWARE.
 */


/**
 * Authors: Andrey A. Popov, andrey.anat.popov@gmail.com
 */

import cryptod.hash.murmurhash3;

import std.datetime, std.stdio, std.random, std.conv;


void benchmark_murmur3()
{
	string input = "";
	
	uint numtimes = 0x10000;
	
	uint strLen = 1024;
	
	for(uint i = 0; i < strLen; i++)
		input ~= text(uniform(0,0xf));
	
	auto timer = StopWatch(AutoStart.yes);
	
	
	
	for(uint i = 0; i < numtimes; i++)
	{
		//murmurhash3_x86_32((cast(ubyte*)&i)[0..4],i);
		murmurhash3_x86_32(input,i);
	}
	writefln("%s murmurhash3_x86_32 in %s milliseconds: %s MB/s", numtimes,timer.peek.msecs,((strLen*cast(float)numtimes)/(1024 * 1024))/((cast(float)timer.peek.msecs)/1000));
	
	
	timer.reset();
	
	for(uint i = 0; i < numtimes; i++)
	{
		//murmurhash3_x86_128((cast(ubyte*)&i)[0..4],i);
		murmurhash3_x86_128(input,i);
	}
	writefln("%s murmurhash3_x86_128 in %s milliseconds: %s MB/s", numtimes,timer.peek.msecs,((strLen*cast(float)numtimes)/(1024 * 1024))/((cast(float)timer.peek.msecs)/1000));
	
	timer.reset();
	
	for(uint i = 0; i < numtimes; i++)
	{
		//murmurhash3_x64_128((cast(ubyte*)&i)[0..4],i);
		murmurhash3_x64_128(input,i);
	}
	writefln("%s murmurhash3_x64_128 in %s milliseconds: %s MB/s", numtimes,timer.peek.msecs,((strLen*cast(float)numtimes)/(1024 * 1024))/((cast(float)timer.peek.msecs)/1000));
}

void main()
{
	benchmark_murmur3();
}
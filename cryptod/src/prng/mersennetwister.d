// Written in the D programming language

/*	Copyright Andrey A Popov 2012
 * 
 *	Permission is hereby granted, free of charge, to any person or organization
 *	obtaining a copy of the software and accompanying documentation covered by
 *	this license (the "Software") to use, reproduce, display, distribute,
 *	execute, and transmit the Software, and to prepare derivative works of the
 *	Software, and to permit third-parties to whom the Software is furnished to
 *	do so, all subject to the following:
 *	
 *	The copyright notices in the Software and this entire statement, including
 *	the above license grant, this restriction and the following disclaimer,
 *	must be included in all copies of the Software, in whole or in part, and
 *	all derivative works of the Software, unless such copies or derivative
 *	works are solely in the form of machine-executable object code generated by
 *	a source language processor.
 *	
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *	DEALINGS IN THE SOFTWARE.
 */

/**
 * Authors: Andrey A. Popov, andrey.anat.popov@gmail.com
 */

module cryptod.prng.mersennetwister;

class MersennseTwister
{
	private:
	const upperbit  = 0b10000000000000000000000000000000;
	const lowerbits = 0b01111111111111111111111111111111;

	uint[624] MT;
	short index = 0;
	
	void generate()
	{
		for(uint i = 0; i < 624; i++)
		{
			uint y = (MT[i]&upperbit) + (MT[(i+1)%624]&lowerbits);
			MT[i] = MT[(i + 397)%624] ^ y>>1;
			if(y % 2 == 1)
			{
				MT[i] = MT[i] ^ 0x9908b0df;
			}
		}
	}
	
	void init(uint seed)
	{
		MT[0] = seed;
		for(uint i = 1; i < 624; i++)
		{ 
			MT[i] = 0x6c078965 * (MT[i-1] ^ (MT[i-1]>>30)) + i;
		}
	}
	
	public:
	
	this(uint seed) { init(seed); }
	
	this() { init(5489); }
	
	uint getNextInt()
	{
		if(index==0)
			generate();
			
		uint y = MT[index];
		y = y ^ (y>>11);
		y = y ^ ((y<<7)&0x9d2c5680);
		y = y ^ ((y<<15)&0xefc60000);
		y = y ^ (y>>18);
		
		index = (index + 1)%624;
		
		return y;
	}
}
// Written in the D programming language

/*	Copyright Andrey A Popov 2012
 * 
 *	Permission is hereby granted, free of charge, to any person or organization
 *	obtaining a copy of the software and accompanying documentation covered by
 *	this license (the "Software") to use, reproduce, display, distribute,
 *	execute, and transmit the Software, and to prepare derivative works of the
 *	Software, and to permit third-parties to whom the Software is furnished to
 *	do so, all subject to the following:
 *	
 *	The copyright notices in the Software and this entire statement, including
 *	the above license grant, this restriction and the following disclaimer,
 *	must be included in all copies of the Software, in whole or in part, and
 *	all derivative works of the Software, unless such copies or derivative
 *	works are solely in the form of machine-executable object code generated by
 *	a source language processor.
 *	
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *	DEALINGS IN THE SOFTWARE.
 */


/**
 * Authors: Andrey A. Popov, andrey.anat.popov@gmail.com
 */

module cryptod.kdf.pbkdf2;

import std.math;

/**
 * Example:
 * ----
 * import cryptod.prf.hmac;
 * import cryptod.hash.sha1;
 * import std.stdio;
 * 
 * alias hmac!(SHA1ub) HMAC_SHA1;
 * 
 * ubyte[] key = PBKDF2(&HMAC_SHA1, "password", [0x78,0x57,0x8E,0x5A,0x5D,0x63,0xCB,0x06], 1000, 16);
 * 
 * writefln("%(%02x%)",key);
 * ----
 */
ubyte[] PBKDF2(ubyte[] function(ubyte[],ubyte[]) PRF, string P, ubyte[] S, uint c, uint dkLen)
{
	union word { uint i; ubyte[4] b; }
	word x;
	uint hLen = PRF([],[]).length;
	uint l = cast(uint)ceil((cast(float)dkLen)/(cast(float)hLen));
	uint r = dkLen - (l - 1) * hLen;
	
	ubyte[] F(ubyte[] PP, ubyte[] SS, uint cc, uint ii)
	{
		x.i = ii;
		SS ~= x.b;
		ubyte[] U = PRF(PP,SS);
		for(uint j = 1; j < cc; j++)
		{
			U[] ^= PRF(PP,U)[];
		}
		return U;
	}
	
	ubyte[] T = [];
	for(uint i = 0; i < l; i++)
		T ~= F(cast(ubyte[])P,S,c,i+1);
	
	return T[0..r];
}

unittest
{
	import cryptod.mac.hmac;
	import cryptod.hash.sha1;
	import std.stdio;
	
	alias hmac!(SHA1ub) HMAC_SHA1;
	
	ubyte[] key = PBKDF2(&HMAC_SHA1, "password", [0x78,0x57,0x8E,0x5A,0x5D,0x63,0xCB,0x06], 1000, 16);
	
	//writefln("%(%02x%)",key);
}
// Written in the D programming language

/*	Copyright Andrey A Popov 2012
 * 
 *	Permission is hereby granted, free of charge, to any person or organization
 *	obtaining a copy of the software and accompanying documentation covered by
 *	this license (the "Software") to use, reproduce, display, distribute,
 *	execute, and transmit the Software, and to prepare derivative works of the
 *	Software, and to permit third-parties to whom the Software is furnished to
 *	do so, all subject to the following:
 *	
 *	The copyright notices in the Software and this entire statement, including
 *	the above license grant, this restriction and the following disclaimer,
 *	must be included in all copies of the Software, in whole or in part, and
 *	all derivative works of the Software, unless such copies or derivative
 *	works are solely in the form of machine-executable object code generated by
 *	a source language processor.
 *	
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *	DEALINGS IN THE SOFTWARE.
 */


/**
 * Authors: Andrey A. Popov, andrey.anat.popov@gmail.com
 */

module cryptod.kdf.pbkdf1;

/**
 * Example:
 * ----
 * import cryptod.hash.sha1;
 * import std.stdio;
 * ubyte[] key = PBKDF1("password", [0x78,0x57,0x8E,0x5A,0x5D,0x63,0xCB,0x06], 1000, 16, &SHA1);
 * writefln("%(%02X%)",key);
 * ----
 *
 * Note: PBKDF1 is not secure, and is not suitable for cryptographic purposes.
 */
ubyte[] PBKDF1(string P, ubyte[8] S, uint C, uint kLen, ubyte[] function(ubyte[]) hash)
{
	uint hLen = hash([]).length;
	if(kLen > hLen)
		throw new Exception("The key length must be less than or equal to the output of the hash.");
	
	ubyte[] T = new ubyte[hLen];
	T = hash(cast(ubyte[])P ~ S);
	for(uint i = 1; i < C; i++)
		T = hash(T);
	
	return T[0..kLen];
}

unittest
{
	import cryptod.hash.sha1;
	import std.stdio;
	
	ubyte[] k = PBKDF1("password", [0x78,0x57,0x8E,0x5A,0x5D,0x63,0xCB,0x06], 1000, 16, &SHA1);
	//writefln("%(%02X%)",k);
}
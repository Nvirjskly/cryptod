// Written in the D programming language

/*	Copyright Andrey A Popov 2012
 * 
 *	Permission is hereby granted, free of charge, to any person or organization
 *	obtaining a copy of the software and accompanying documentation covered by
 *	this license (the "Software") to use, reproduce, display, distribute,
 *	execute, and transmit the Software, and to prepare derivative works of the
 *	Software, and to permit third-parties to whom the Software is furnished to
 *	do so, all subject to the following:
 *	
 *	The copyright notices in the Software and this entire statement, including
 *	the above license grant, this restriction and the following disclaimer,
 *	must be included in all copies of the Software, in whole or in part, and
 *	all derivative works of the Software, unless such copies or derivative
 *	works are solely in the form of machine-executable object code generated by
 *	a source language processor.
 *	
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *	DEALINGS IN THE SOFTWARE.
 */

/**
 * Authors: Andrey A. Popov, andrey.anat.popov@gmail.com
 */

module cryptod.hash.md2;

import std.string, std.format, std.array;

import cryptod.hash.hash;

/**
 * MD2 function that uses the SHA1 context and takes a simple string argument.
 */
ubyte[] MD2s(string s)
{
	return MD2ub(cast(ubyte[]) s);
}
/**
 * MD2 function that uses the SHA1 context and takes a simple ubyte[] argument.
 */
ubyte[] MD2ub(ubyte[] s)
{
	MD2Context md0 = new MD2Context();
	md0.AddToContext(s);
	md0.End();
	ubyte[] ret = md0.AsBytes();
	return ret;
}

/**
 * The MD2 hash according to specification;
 * Takes a byte array and converts it into a 128-bit hash.
 */
class MD2Context : HashContext
{
	private:
	
	immutable ubyte[256] S = [
	0x29, 0x2E, 0x43, 0xC9, 0xA2, 0xD8, 0x7C, 0x01, 0x3D, 0x36, 0x54, 0xA1, 0xEC, 0xF0, 0x06, 0x13, 
	0x62, 0xA7, 0x05, 0xF3, 0xC0, 0xC7, 0x73, 0x8C, 0x98, 0x93, 0x2B, 0xD9, 0xBC, 0x4C, 0x82, 0xCA, 
	0x1E, 0x9B, 0x57, 0x3C, 0xFD, 0xD4, 0xE0, 0x16, 0x67, 0x42, 0x6F, 0x18, 0x8A, 0x17, 0xE5, 0x12, 
	0xBE, 0x4E, 0xC4, 0xD6, 0xDA, 0x9E, 0xDE, 0x49, 0xA0, 0xFB, 0xF5, 0x8E, 0xBB, 0x2F, 0xEE, 0x7A, 
	0xA9, 0x68, 0x79, 0x91, 0x15, 0xB2, 0x07, 0x3F, 0x94, 0xC2, 0x10, 0x89, 0x0B, 0x22, 0x5F, 0x21,
	0x80, 0x7F, 0x5D, 0x9A, 0x5A, 0x90, 0x32, 0x27, 0x35, 0x3E, 0xCC, 0xE7, 0xBF, 0xF7, 0x97, 0x03, 
	0xFF, 0x19, 0x30, 0xB3, 0x48, 0xA5, 0xB5, 0xD1, 0xD7, 0x5E, 0x92, 0x2A, 0xAC, 0x56, 0xAA, 0xC6, 
	0x4F, 0xB8, 0x38, 0xD2, 0x96, 0xA4, 0x7D, 0xB6, 0x76, 0xFC, 0x6B, 0xE2, 0x9C, 0x74, 0x04, 0xF1, 
	0x45, 0x9D, 0x70, 0x59, 0x64, 0x71, 0x87, 0x20, 0x86, 0x5B, 0xCF, 0x65, 0xE6, 0x2D, 0xA8, 0x02, 
	0x1B, 0x60, 0x25, 0xAD, 0xAE, 0xB0, 0xB9, 0xF6, 0x1C, 0x46, 0x61, 0x69, 0x34, 0x40, 0x7E, 0x0F, 
	0x55, 0x47, 0xA3, 0x23, 0xDD, 0x51, 0xAF, 0x3A, 0xC3, 0x5C, 0xF9, 0xCE, 0xBA, 0xC5, 0xEA, 0x26, 
	0x2C, 0x53, 0x0D, 0x6E, 0x85, 0x28, 0x84, 0x09, 0xD3, 0xDF, 0xCD, 0xF4, 0x41, 0x81, 0x4D, 0x52, 
	0x6A, 0xDC, 0x37, 0xC8, 0x6C, 0xC1, 0xAB, 0xFA, 0x24, 0xE1, 0x7B, 0x08, 0x0C, 0xBD, 0xB1, 0x4A, 
	0x78, 0x88, 0x95, 0x8B, 0xE3, 0x63, 0xE8, 0x6D, 0xE9, 0xCB, 0xD5, 0xFE, 0x3B, 0x00, 0x1D, 0x39, 
	0xF2, 0xEF, 0xB7, 0x0E, 0x66, 0x58, 0xD0, 0xE4, 0xA6, 0x77, 0x72, 0xF8, 0xEB, 0x75, 0x4B, 0x0A, 
	0x31, 0x44, 0x50, 0xB4, 0x8F, 0xED, 0x1F, 0x1A, 0xDB, 0x99, 0x8D, 0x33, 0x9F, 0x11, 0x83, 0x14];
	
	immutable ubyte[][17] pads = [
	[],[1],[2,2],[3,3,3],[4,4,4,4],[5,5,5,5,5],[6,6,6,6,6,6],[7,7,7,7,7,7,7],[8,8,8,8,8,8,8,8],
	[9,9,9,9,9,9,9,9,9],[10,10,10,10,10,10,10,10,10,10],[11,11,11,11,11,11,11,11,11,11,11],
	[12,12,12,12,12,12,12,12,12,12,12,12],[13,13,13,13,13,13,13,13,13,13,13,13,13],
	[14,14,14,14,14,14,14,14,14,14,14,14,14,14],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],
	[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	];
	
	ubyte[] M;
	ubyte[16] C; //Checksum
	ubyte[48] X;
	bool end;
	ubyte L;
	
	
	
	void PadMessage()//Might be better to pre-compute pad; Meh only some improvement
	{
		ubyte pad = 16-M.length%16;
		/*for(ubyte i = 0; i == 0 || (M.length%16 != 0); i++)
			M ~= pad;*/
		M ~= pads[pad];
	}
	
	void AddToChecksum(ubyte[] H)
	{
		for (uint i = 0; i < H.length/16; i++)
		{
			L = C[15];
			for (uint j = 0; j < 16; j++)
			{
				//ubyte c = H[i*16+j];
				C[j] ^= S[H[i*16+j] ^ L];
				L = C[j];
			}
		}
	}
	
	void AppendChecksum()
	{
		M ~= C;
	}
	
	void AddToHash(ubyte[] H)
	{
	
		if(!end)
			AddToChecksum(H);
		for (uint i = 0; i < H.length/16; i++)
		{
			X[16..32] = H[i*16..(i+1)*16];//for some reason assignment is faster, but operations are slower this way... D...
			//X[32..48] = X[16..32] ^ X[0..16];//this is slower
			for(uint j = 0; j < 16; j++)
			{
				//X[16+j] = H[i*16+j]; // this is slower
				X[32+j] = X[16+j] ^ X[j];//this is faster
			}
			uint t = 0;
			for(uint j = 0; j < 18; j++)
			{
				for(uint k = 0; k < 48; k++)
				{
					X[k] ^= S[t];
					t = X[k];
				}
				t = (t+j)&0xff;
			}
		}
	}
	
	public:
	
	this()
	{
		C[] = 0;//assignment this way faster than loop
		M = [];	
		
		X[] = 0;
			
		end = false;	
		L = 0;
	}
	
	void AddToContext(ubyte[] m)
	{
		//ubyte[] Z = M.dup ~ m.dup;
		ubyte[] Z = M ~ m;
//		ubyte[] H = Z[0..(Z.length-(Z.length%16))].dup;
//		M = Z[Z.length-(Z.length%16)..Z.length].dup;
		ubyte[] H = Z[0..(Z.length-(Z.length%16))];
		M = Z[Z.length-(Z.length%16)..Z.length];
		
		if(H.length > 0)
			AddToHash(H);
	}
	
	void AddToContext(string m)
	{		
		AddToContext(cast(ubyte[])m);
	}
	
	void End()
	{
		PadMessage();
		AddToChecksum(M);
		AppendChecksum();
		end = true;
		AddToHash(M);
	}
	ubyte[] AsBytes()
	{
		return X[0..16];
	}
	string AsString()
	{
		auto writer = appender!string();
		formattedWrite(writer, "%(%02x%)",X[0..16]);
		return writer.data;
	}	
}
unittest
{
	import std.stdio;
	MD2Context md0 = new MD2Context();
	md0.AddToContext(cast(ubyte[])"");
	md0.End();
	assert(md0.AsString() == "8350e5a3e24c153df2275c9f80692773");
	
	MD2Context md = new MD2Context();
	md.AddToContext(cast(ubyte[])"12345678901234567890123456789012345678901234567890123456789012345678901234567890");
	md.End();
	assert(md.AsString() == "d5976f79d83d3a0dc9806c3c66f3efd8");
	
	writeln("MD2 unittest passed.");
}
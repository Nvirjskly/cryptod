// Written in the D programming language

/*	Copyright Andrey A Popov 2012
 * 
 *	Permission is hereby granted, free of charge, to any person or organization
 *	obtaining a copy of the software and accompanying documentation covered by
 *	this license (the "Software") to use, reproduce, display, distribute,
 *	execute, and transmit the Software, and to prepare derivative works of the
 *	Software, and to permit third-parties to whom the Software is furnished to
 *	do so, all subject to the following:
 *	
 *	The copyright notices in the Software and this entire statement, including
 *	the above license grant, this restriction and the following disclaimer,
 *	must be included in all copies of the Software, in whole or in part, and
 *	all derivative works of the Software, unless such copies or derivative
 *	works are solely in the form of machine-executable object code generated by
 *	a source language processor.
 *	
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *	DEALINGS IN THE SOFTWARE.
 */

module cryptod.hash.skein;

import cryptod.hash.hash;

/**
 * The Skein Hash Family or is it the whole one... This is not finished
 *
 */
class SkeinContext : HashContext
{	
	const ubyte treelevelbits = 0x7f;
	const ubyte bitpadbit     = 0x80;
	const ubyte typebits      = 0x3f;
	const ubyte firstbit      = 0x40;
	const ubyte finalbit      = 0x80;
	

	void UBI(ubyte[] G, ubyte[] M, ubyte[16] Ts)
	{
		/**
		 * Ts description:
		 * first 12 bytes are the position
		 * next two bytes are reserved MUST BE ZERO
		 * next bit contains the treelevel and the pitpad
		 * final bit is the type,firstbit, and lastbit.
		 */ 
		 
		ubyte treelevel = Ts[14] & treelevelbits;
		bool  pad       = (Ts[14] & bitpadbit) > 0;
		ubyte type      = Ts[15] & typebits;
		bool  firstSet  = (Ts[15] & firstbit) > 0;
		bool  finalSet  = (Ts[15] & finalbit) > 0;	
		
		ulong Nb = G.length;
		ulong Nm = M.length;
		
		ulong p = (Nm == 0) ? Nb : Nb - (Nm % Nb);
		
		for (ulong i = 0; i < p; i++)
			M ~= 0x00;
			
		ubyte[] Mb;
		 
		
		
		//ulong pmax = 
		
	}


	this()
	{
	
	}
	void AddToContext(ubyte[] m)
	{
		
	}
	void End()
	{
	
	}
	ubyte[] AsBytes()
	{
		return [];
	}
	string AsString()
	{
		return "";
	}
}
